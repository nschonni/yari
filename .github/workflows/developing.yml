name: Developing with Yari

on:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/checkout@v2
        with:
          repository: mdn/content
          path: mdn/content

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.4
        with:
          node-version: "12"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2.1.3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install all yarn packages
        run: |
          yarn --frozen-lockfile

      - name: Setup kernel for react native, increase watchers
        run: |
          # When running Yari on Linux, you might get the
          # "Error: ENOSPC: System limit for number of file watchers reached" error.
          # This, resolves that.
          # Source https://github.com/expo/expo-github-action/issues/20#issuecomment-541676895
          echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: Start the dev server
        env:
          # Remember, the mdn/content repo got cloned into `pwd` into a
          # sub-folder called "mdn/content"
          CONTENT_ROOT: "${{ github.workspace }}/mdn/content/files"
        run: |
          # Sanity check that the mdn/kitchensink page is there. If you don't do
          # this, and the file has accidentally or intentionally been deleted,
          # unfortunately the error messaging can be very misleading because the
          # tests would assume there's something wrong with the code instead of
          # the content if loading this page fails.
          ls "$CONTENT_ROOT/en-us/mdn/kitchensink"

          yarn prepare-build
          yarn start > /tmp/stdout.log 2> /tmp/stderr.log &

      - name: Wait for servers
        run: |
          # Just a slight delay to wait until the dev server is ready.
          sleep 5

          curl --retry-connrefused --retry 5 http://localhost:5000 > /dev/null
          curl --retry-connrefused --retry 5 --silent http://localhost:3000 > /dev/null

      - name: Test viewing the dev server
        env:
          # This will make sure the tests in `testing/tests/*.test.js` only run
          # if the development server is up and ready to be tested.
          TESTING_DEVELOPING: true
        run: |
          status=0
          yarn test:testing developing || (
            status=$?
            echo "Testing failed! Going to dump stdout and stderr"
            echo "STDOUT..................................................."
            cat /tmp/stdout.log
            echo "STDERR..................................................."
            cat /tmp/stderr.log
            echo $status
            exit $status
          )
          exit $status
